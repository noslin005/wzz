# setfsuid ___________________________________________________
# long sys_setfsuid(uid_t uid)
# long sys_setfsuid16(old_uid_t uid)
#

@define _SYSCALL_SETFSUID_NAME
%(
	name = "setfsuid"
%)

@define _SYSCALL_SETFSUID_ARGSTR
%(
	argstr = sprint(fsuid)
%)

probe syscall.setfsuid = dw_syscall.setfsuid !, nd_syscall.setfsuid ? {}
probe syscall.setfsuid.return = dw_syscall.setfsuid.return !,
	                        nd_syscall.setfsuid.return ? {}

# dw_setfsuid _____________________________________________________

probe dw_syscall.setfsuid = kernel.function("sys_setfsuid16").call ?,
                         kernel.function("sys_setfsuid").call ?
{
	@_SYSCALL_SETFSUID_NAME
	fsuid = __int32($uid)
	@_SYSCALL_SETFSUID_ARGSTR
}
probe dw_syscall.setfsuid.return = kernel.function("sys_setfsuid16").return ?,
                                kernel.function("sys_setfsuid").return ?
{
	@_SYSCALL_SETFSUID_NAME
	retstr = return_str(1, $return)
}

# nd_setfsuid _____________________________________________________

probe nd_syscall.setfsuid = kprobe.function("sys_setfsuid16") ?,
                            kprobe.function("sys_setfsuid") ?
{
	@_SYSCALL_SETFSUID_NAME
	asmlinkage()
	fsuid = int_arg(1)
	@_SYSCALL_SETFSUID_ARGSTR
}
probe nd_syscall.setfsuid.return = kprobe.function("sys_setfsuid16").return ?,
                                   kprobe.function("sys_setfsuid").return ?
{
	@_SYSCALL_SETFSUID_NAME
	retstr = returnstr(1)
}
