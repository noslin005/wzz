# setuid _____________________________________________________
#
# long sys_setuid(uid_t uid)
# long sys_setuid16(old_uid_t uid)
#

@define _SYSCALL_SETUID_NAME
%(
	name = "setuid"
%)

@define _SYSCALL_SETUID_ARGSTR
%(
	argstr = sprint(uid)
%)

probe syscall.setuid = dw_syscall.setuid !, nd_syscall.setuid ? {}
probe syscall.setuid.return = dw_syscall.setuid.return !,
                              nd_syscall.setuid.return ? {}

# dw_setuid _____________________________________________________

probe dw_syscall.setuid = kernel.function("sys_setuid16").call ?,
                       kernel.function("sys_setuid").call
{
	@_SYSCALL_SETUID_NAME
	uid = __int32($uid)
	@_SYSCALL_SETUID_ARGSTR
}
probe dw_syscall.setuid.return = kernel.function("sys_setuid16").return ?,
                              kernel.function("sys_setuid").return
{
	@_SYSCALL_SETUID_NAME
	retstr = return_str(1, $return)
}

# nd_setuid _____________________________________________________

probe nd_syscall.setuid = kprobe.function("sys_setuid16") ?,
                          kprobe.function("sys_setuid") ?
{
	@_SYSCALL_SETUID_NAME
	asmlinkage()
	uid = int_arg(1)
	@_SYSCALL_SETUID_ARGSTR
}
probe nd_syscall.setuid.return = kprobe.function("sys_setuid16").return ?,
                                 kprobe.function("sys_setuid").return ?
{
	@_SYSCALL_SETUID_NAME
	retstr = returnstr(1)
}
